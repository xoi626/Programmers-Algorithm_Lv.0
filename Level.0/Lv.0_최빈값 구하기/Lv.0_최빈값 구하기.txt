[최빈값 구하기]


[문제 설명]
최빈값은 주어진 값 중에서 가장 자주 나오는 값을 의미합니다. 정수 배열 array가 매개변수로 주어질 때, 최빈값을 return 하도록 solution 함수를 완성해보세요. 최빈값이 여러 개면 -1을 return 합니다.


[입출력 예]
array	result
[1, 2, 3, 3, 3, 4]	3
[1, 1, 2, 2]	-1
[1]

[나의 풀이]
class Solution {
    fun solution(array: IntArray): Int {

        // 중복제거 
        val num = array.distinct()

        // 숫자별 중복개수 담을 맵 (Key : 숫자 / Value : 중복개수)
        var mapNumCnt = mutableMapOf<Int, Int>()

        // 숫자별 중복개수를 구한다.
        for (i in 0..num.size-1){
            mapNumCnt += mutableMapOf<Int,Int>(num[i] to array.count{ it == num[i] })
        }

        // 최빈값 구하기
        val max : Int = mapNumCnt.values.maxOf {it}

        // 최빈값 존재여부
        val bNumCheck = if (1 == mapNumCnt.count{ it.value == max}) true else false

        // 최빈값이 존재한다. > return 최빈값
        if (bNumCheck) return mapNumCnt.filter { it.value == max}.keys.first()            
        // 최빈값이 존재하지 않는다. > return -1
        else return -1      

    }
}


[다른 사람의 풀이1]
class Solution {
    fun solution(array: IntArray): Int {
        val list = array.groupBy { it }.entries.sortedByDescending { (_, value) -> value.size }
        return if (list.size > 1 && list[0].value.size == list[1].value.size) -1 else list[0].key
    }
}

[다른 사람의 풀이2]
class Solution {
    fun solution(array: IntArray) = array
        .groupBy { it }
        .map { it.value.size to it.key }
        .sortedByDescending { it.first }
        .let {
            if (it.size == 1) it.first().second
            else if (it.first().first == it[1].first) -1
            else it.first().second
        }
}

[다른 사람의 풀이3]
class Solution {
    fun solution(array: IntArray): Int {    
        val map = array.toList().toTypedArray().groupingBy{it}.eachCount()
        var sortedArr = map.values.toList().sortedDescending()
        return if(sortedArr.size==1){
            map.maxByOrNull{ it.value }!!.key
        }else{
            if(sortedArr[0] == sortedArr[1]){
                -1
            }else{
                map.maxByOrNull{it.value}!!.key
            }
        }
    }
}

