[안전지대]



[문제 설명]
다음 그림과 같이 지뢰가 있는 지역과 지뢰에 인접한 위, 아래, 좌, 우 대각선 칸을 모두 위험지역으로 분류합니다.

지뢰는 2차원 배열 board에 1로 표시되어 있고 board에는 지뢰가 매설 된 지역 1과, 지뢰가 없는 지역 0만 존재합니다.
지뢰가 매설된 지역의 지도 board가 매개변수로 주어질 때, 안전한 지역의 칸 수를 return하도록 solution 함수를 완성해주세요.



[입출력 예]
board	result
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 0, 0]]	16
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]]	13
[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]	0





[다른 사람의 풀이]
class Solution {
    fun solution(board: Array<IntArray>): Int =
    board.indices.map { row ->
        board[row].indices.filter { board[row][it] == 1 }.forEach { col ->
            ((row - 1).coerceAtLeast(0)..(row + 1).coerceAtMost(board.lastIndex)).map { row2 ->
                ((col - 1).coerceAtLeast(0)..(col + 1).coerceAtMost(board.first().lastIndex)).forEach { col2 ->
                    if (board[row2][col2] == 0)
                        board[row2][col2] = 2
                }
            }
        }
    }.run { board.indices.map { board[it].count { value -> value == 0 } } }.sum()
}




[나의 풀이]
class Solution {
    fun solution(board: Array<IntArray>): Int {
        var answer = 0
        val wrapBoard = Array(board.size + 2) { IntArray(board[0].size + 2) }

        for (i in wrapBoard.indices) {
            for (j in wrapBoard[i].indices) {
                if (i == 0 || j == 0 || i == wrapBoard.size - 1 || j == wrapBoard[0].size - 1) {
                    wrapBoard[i][j] = 1
                }
                if (i > 0 && i < wrapBoard.size - 1 && j > 0 && j < wrapBoard[0].size - 1) {
                    if (board[i - 1][j - 1] == 1) {
                        wrapBoard[i][j] = 1
                        wrapBoard[i - 1][j - 1] = 1
                        wrapBoard[i - 1][j] = 1
                        wrapBoard[i - 1][j + 1] = 1
                        wrapBoard[i][j - 1] = 1
                        wrapBoard[i][j + 1] = 1
                        wrapBoard[i + 1][j - 1] = 1
                        wrapBoard[i + 1][j] = 1
                        wrapBoard[i + 1][j + 1] = 1
                    }
                }
            }
        }
        for (array in wrapBoard) {
            for (e in array) {
                if (e == 0) {
                    answer++
                }
            }
        }
        return answer
    }
}
