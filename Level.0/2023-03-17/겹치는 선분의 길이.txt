[겹치는 선분의 길이]



[문제 설명]
선분 3개가 평행하게 놓여 있습니다. 세 선분의 시작과 끝 좌표가 [[start, end], [start, end], [start, end]] 형태로 들어있는 2차원 배열 lines가 매개변수로 주어질 때, 두 개 이상의 선분이 겹치는 부분의 길이를 return 하도록 solution 함수를 완성해보세요.

lines가 [[0, 2], [-3, -1], [-2, 1]]일 때 그림으로 나타내면 다음과 같습니다.

선분이 두 개 이상 겹친 곳은 [-2, -1], [0, 1]로 길이 2만큼 겹쳐있습니다.



[입출력 예]
lines	result
[[0, 1], [2, 5], [3, 9]]	2
[[-1, 1], [1, 3], [3, 9]]	0
[[0, 5], [3, 9], [1, 10]]	8



[입출력 예 설명]
입출력 예 #1

두 번째, 세 번째 선분 [2, 5], [3, 9]가 [3, 5] 구간에 겹쳐있으므로 2를 return 합니다.
입출력 예 #2

겹친 선분이 없으므로 0을 return 합니다.
입출력 예 #3

첫 번째와 두 번째 선분이 [3, 5] 구간에서 겹칩니다.
첫 번째와 세 번째 선분 [1, 5] 구간에서 겹칩니다.
두 번째와 세 번째 선분 [3, 9] 구간에서 겹칩니다.
따라서 [1, 9] 구간에 두 개 이상의 선분이 겹쳐있으므로, 8을 return 합니다.



[다른 사람의 풀이]
class Solution {
    fun solution(lines: Array<IntArray>): Int {
        val newline = mutableListOf<Int>()
        lines.map {
            for(i in it[0]+1..it[1]){
                newline.add(i)
            }
        }

        return newline.filter { item -> newline.count { it == item } > 1 }.distinct().count()
    }
}



[나의 풀이]
class Solution {
    fun solution(lines: Array<IntArray>): Int {
        var answer: Int = 0

        val map: MutableMap<String, Int> = HashMap()

        for (line in lines) {
            val tempMin = Math.min(line[0], line[1])
            val tempMax = Math.max(line[0], line[1])
            for (i in tempMin + 1 until tempMax + 1) {
                val str = (i - 1).toString() + "/" + i
                map[str] = map.getOrDefault(str, 0) + 1
            }
        }

        for (value in map.values) {
            if (value > 1) answer++
        }

        return answer
    }
}