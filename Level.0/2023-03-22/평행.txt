[평행]



[문제 설명]
점 네 개의 좌표를 담은 이차원 배열  dots가 다음과 같이 매개변수로 주어집니다.

[[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
주어진 네 개의 점을 두 개씩 이었을 때, 두 직선이 평행이 되는 경우가 있으면 1을 없으면 0을 return 하도록 solution 함수를 완성해보세요.



[입출력 예]
dots	result
[[1, 4], [9, 2], [3, 8], [11, 6]]	1
[[3, 5], [4, 1], [2, 4], [5, 10]]	0



[다른 사람의 풀이]
class Solution {
    fun solution(dots: Array<IntArray>)
        = if (
            slope(dots[0], dots[1]) == slope(dots[2], dots[3])
            || slope(dots[0], dots[2]) == slope(dots[1], dots[3])
            || slope(dots[0], dots[3]) == slope(dots[1], dots[2])
        ) 1 else 0

    private fun slope(p1: IntArray, p2: IntArray): Double
        = (p2[1] - p1[1]).toDouble() / (p2[0] - p1[0])
}




[나의 풀이]
import kotlin.math.abs

class Solution {
    fun solution(dots: Array<IntArray>): Int {
        var answer = 0

        val x1 = dots[0][0]
        val y1 = dots[0][1]
        val x2 = dots[1][0]
        val y2 = dots[1][1]
        val x3 = dots[2][0]
        val y3 = dots[2][1]
        val x4 = dots[3][0]
        val y4 = dots[3][1]

        if (abs((x1 - x2) * (y3 - y4)) == abs((y1 - y2) * (x3 - x4))) {
            return 1
        }
        if (abs((x1 - x3) * (y2 - y4)) == abs((y1 - y3) * (x2 - x4))) {
            return 1
        }
        if (abs((x1 - x4) * (y2 - y3)) == abs((y1 - y4) * (x2 - x3))) {
            return 1
        }
        return 0
    }
}



